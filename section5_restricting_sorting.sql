-- USING WHERE CLAUSE
SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;

SELECT *
FROM EMPLOYEES
WHERE SALARY>=10000;

SELECT * 
FROM EMPLOYEES
WHERE FIRST_NAME = 'Steven';

-- USING DATE
SELECT *
FROM EMPLOYEES
WHERE HIRE_DATE>'17-OCT-03';

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME<'Alberto'
ORDER BY FIRST_NAME ASC;

-- BETWEEN AND
SELECT *
FROM EMPLOYEES
WHERE SALARY BETWEEN 10000 AND 20000;

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME BETWEEN 'A' AND 'C';

-- IN OPERATOR
SELECT * FROM EMPLOYEES
WHERE SALARY IN (10000, 25000, 17000);

-- LIKE
SELECT * FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'S%';

SELECT * FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%s';

SELECT * FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%am%';

SELECT * FROM EMPLOYEES
WHERE FIRST_NAME LIKE '_d%';

SELECT * FROM EMPLOYEES
WHERE FIRST_NAME LIKE '__s%';

SELECT * FROM JOBS
WHERE JOB_ID LIKE 'SA/_%' ESCAPE '/';

-- IS NULL
SELECT * FROM EMPLOYEES;

SELECT * FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;

-- USING NOT
SELECT * FROM EMPLOYEES
WHERE EMPLOYEE_ID NOT IN (100, 101);

SELECT * FROM EMPLOYEES
WHERE FIRST_NAME NOT LIKE 'S%';

SELECT * FROM EMPLOYEES
WHERE SALARY != 17000;

-- AND/OR/NOT
SELECT * FROM EMPLOYEES
WHERE SALARY > 10000
AND DEPARTMENT_ID IN (60, 90)
AND COMMISSION_PCT IS NULL;

-- ORDER BY CLAUSE
SELECT * FROM EMPLOYEES
ORDER BY HIRE_DATE DESC;

SELECT * FROM EMPLOYEES
WHERE DEPARTMENT_ID=90
ORDER BY EMPLOYEE_ID;

-- NULL VALUES APPEAR LAST IN ASCENDING ORDER
SELECT * FROM EMPLOYEES
ORDER BY COMMISSION_PCT NULLS FIRST;

SELECT FIRST_NAME N FROM EMPLOYEES
ORDER BY N;

SELECT * FROM EMPLOYEES
ORDER BY FIRST_NAME DESC, SALARY ASC;

-- FETCH CLAUSE
SELECT * FROM EMPLOYEES
ORDER BY EMPLOYEE_ID
OFFSET 4 ROWS FETCH NEXT 50 PERCENT ROWS ONLY;
-- OFFSET 5 ROWS FETCH NEXT 5 ROWS ONLY;
-- FETCH FIRST 50 PERCENT ROWS ONLY;
-- FETCH FIRST 5 ROWS ONLY;

SELECT * FROM EMPLOYEES
ORDER BY SALARY DESC
FETCH FIRST 2 ROWS WITH TIES;

--------------------------------------------------
-- PRACTICE

-- WHERE CLAUSE
SELECT * FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;

SELECT *
FROM EMPLOYEES
WHERE SALARY = 24000;

-- CHARACTER STRINGS AND DATE VALUES ARE ENCLOSED IN SINGLE-QUOTATION
-- CHARACTER VALUES CASE SENSITIVE, DATE VALUES ARE FORMAT-SENSITIVE
-- DATE DEFAULT 'DD-MON-RR'
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID
FROM EMPLOYEES
WHERE FIRST_NAME = 'Steven';

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID
FROM EMPLOYEES
WHERE FIRST_NAME = 'steven';

SELECT *
FROM EMPLOYEES
WHERE HIRE_DATE = '17-OCT-03';

-- USING COMPARISON OPERATOR
SELECT * FROM EMPLOYEES
WHERE SALARY >= 10000;

SELECT *
FROM EMPLOYEES
WHERE HIRE_DATE > '17-OCT-03';

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME > 'Alberto'
ORDER BY FIRST_NAME;

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME < 'Alberto'
ORDER BY FIRST_NAME;

SELECT * 
FROM EMPLOYEES
WHERE SALARY BETWEEN 10000 AND 20000;
-- PLACE LOWER LIMIT FIRST

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME BETWEEN 'A' AND 'C';

-- IN OPERATOR
SELECT *
FROM EMPLOYEES
WHERE SALARY IN (10000, 25000, 17000);

-- LIKE OPERATOR
-- % - 0 OR MORE CHARACTERS
-- _ - MEANS 1 CHARACTER
SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'S%';

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%s';

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%am%';

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '_d%';

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '__s%';

-- HOW TO ESCAPE _ OR %
SELECT *
FROM EMPLOYEES
WHERE JOB_ID LIKE 'SA/_%' ESCAPE '/';

SELECT *
FROM EMPLOYEES
WHERE JOB_ID LIKE 'SA[_%' ESCAPE '[';

SELECT *
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;
-- =NULL IS NOT CORRECT

SELECT *
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;

SELECT *
FROM EMPLOYEES
WHERE EMPLOYEE_ID NOT IN (100, 101);

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME NOT LIKE 'S%';

-- NOT EQUALS <> OR !=
SELECT *
FROM EMPLOYEES
WHERE EMPLOYEE_ID <> 50;

SELECT *
FROM EMPLOYEES
WHERE EMPLOYEE_ID != 50;

-- USING LOGICAL OPERATORS
SELECT *
FROM EMPLOYEES
WHERE SALARY >= 10000
AND DEPARTMENT_ID = 90;

-- OR REQUIRES EITHER TO BE TRUE
SELECT *
FROM EMPLOYEES
WHERE SALARY >= 10000
OR DEPARTMENT_ID = 90;

-- CAN CHAIN CONDITIONS
SELECT *
FROM EMPLOYEES
WHERE SALARY > 2000
AND DEPARTMENT_ID IN (60, 90)
AND COMMISSION_PCT IS NULL;

-- PRIORITY OF OR/AND
-- AND HAS MORE PRIORITY THAN OR
SELECT *
FROM EMPLOYEES
WHERE JOB_ID = 'SA_REP'
OR JOB_ID = 'AD_PRES' AND SALARY > 15000;
-- (JOB_ID = 'AD_PRES' AND SALARY > 15000) GETS EVALUATED FIRST

SELECT *
FROM EMPLOYEES
WHERE JOB_ID = 'SA_REP'
OR (JOB_ID = 'AD_PRES' AND SALARY > 15000);

-- NOT, AND, OR IS IN THAT PRIORITY ORDER
-- PARENTHESIS CAN BE USED TO OVERRIDE
SELECT LAST_NAME, JOB_ID, SALARY
FROM EMPLOYEES
WHERE (JOB_ID = 'SA_REP' OR JOB_ID = 'AD_PRES');

-- ORDERBY CLAUSE
SELECT *
FROM EMPLOYEES
ORDER BY HIRE_DATE; -- DEFAULT ORDER IS ASC

SELECT *
FROM EMPLOYEES
ORDER BY DEPARTMENT_ID;

-- BY DEFAULT NULL VALUES COME LAST IN ASC ORDER
SELECT *
FROM EMPLOYEES
ORDER BY COMMISSION_PCT;

SELECT *
FROM EMPLOYEES
ORDER BY COMMISSION_PCT NULLS LAST;
-- NULL VALUES COME LAST IN ASCENDING ORDER

SELECT *
FROM EMPLOYEES
ORDER BY COMMISSION_PCT NULLS FIRST;

SELECT *
FROM EMPLOYEES
ORDER BY COMMISSION_PCT DESC;

-- CAN SORT BY COLUMN ALIAS
SELECT FIRST_NAME N
FROM EMPLOYEES
ORDER BY N;

-- CAN SORT BY EXPRESSION
SELECT SALARY, SALARY+100
FROM EMPLOYEES
ORDER BY SALARY+100;

-- CAN BE SORTED BY A VARIABLE NOT IN THE SELECT STATEMENT

-- CAN SORT BY MULTIPLE COLUMNS
SELECT DEPARTMENT_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
ORDER BY DEPARTMENT_ID ASC, FIRST_NAME DESC;

-- SORT BY COLUMN NUMBER
SELECT DEPARTMENT_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
ORDER BY 1,3;

-- USING SQL ROWS LIMITING CLAUSE
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
ORDER BY EMPLOYEE_ID;

-- FETCH CLAUSE
-- FOR TOP N QUERIES
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
ORDER BY EMPLOYEE_ID
FETCH FIRST 5 ROWS ONLY;

SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
ORDER BY EMPLOYEE_ID
FETCH FIRST 50 PERCENT ROWS ONLY;
-- ROUNDS UP

SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
ORDER BY EMPLOYEE_ID
OFFSET 5 ROWS FETCH NEXT 5 ROWS ONLY;

SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
ORDER BY EMPLOYEE_ID
OFFSET 4 ROWS FETCH NEXT 50 PERCENT ROWS ONLY;
-- HERE MEANS PERCENT OF THE TABLE, NOT AFTER OFFSET

SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY IS NOT NULL
ORDER BY SALARY DESC
FETCH FIRST 2 ROWS ONLY;

-- IF WE WANT TO RETRIEVE ALONG WITH TIED SALARIES
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY IS NOT NULL
ORDER BY SALARY DESC
FETCH FIRST 2 ROWS WITH TIES;
-- TRIES TO FIND MATCHES TO LAST ROW, AND RETURNS THAT ALSO
-- DONT USE ONLY, WITH TIES








































