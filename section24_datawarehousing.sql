------------------------------------------------
-- EXPLICIT DEFAULT VALUE

DROP TABLE EMP_DEFAULT;

CREATE TABLE EMP_DEFAULT
( EMPNO NUMBER,
  ENAME VARCHAR2(100),
  STATUS VARCHAR2(100) DEFAULT 'ACTIVE'
);

-- IF THIS COLUMN IS NOT MENTIONED IN THE INSERT, IT TAKES THE DEFAULT VALUE
INSERT INTO EMP_DEFAULT(EMPNO, ENAME)
VALUES (1, 'DAVID');

SELECT * FROM EMP_DEFAULT;

-- FOR BETTER READABILITY
INSERT INTO EMP_DEFAULT (EMPNO, ENAME, STATUS)
VALUES (2, 'LARA', DEFAULT);

INSERT INTO EMP_DEFAULT (EMPNO, ENAME, STATUS)
VALUES (3, 'BRIAN', NULL);

-- CAN ALSO SET DEFAULT VALUE IN THE UPDATE
UPDATE EMP_DEFAULT
SET STATUS = DEFAULT
WHERE EMPNO = 3;

SELECT * FROM EMP_DEFAULT;

------------------------------------------------
-- COPY ROWS FROM ANOTHER TABLE
SELECT * FROM EMP_DEFAULT;

INSERT INTO EMP_DEFAULT (EMPNO, ENAME)
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;
-- DEFAULT STATUS TAKEN AS PROVIDED

INSERT INTO EMP_DEFAULT (EMPNO, ENAME)
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 30;

SELECT * FROM EMP_DEFAULT;

INSERT INTO EMP_DEFAULT (EMPNO, ENAME)
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 70
UNION ALL
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 80;

SELECT * FROM EMP_DEFAULT;

------------------------------------------------
-- MULTIPLE INSERTS

-- UNCONDITIONAL INSERT
SELECT EMPLOYEE_ID, HIRE_DATE, SALARY, MANAGER_ID
FROM EMPLOYEES;

DROP TABLE SAL_HIST;

CREATE TABLE SAL_HIST
( EMPID NUMBER,
  HIREDATE DATE,
  SALARY NUMBER
);

DROP TABLE MANAGER_HIST;

CREATE TABLE MANAGER_HIST
( EMPID NUMBER,
  HIREDATE DATE,
  MGR NUMBER
);

INSERT ALL
INTO SAL_HIST (EMPID, HIREDATE, SALARY) VALUES (EMPLOYEE_ID, HIRE_DATE, SALARY)
INTO MANAGER_HIST (EMPID, HIREDATE, MGR) VALUES (EMPLOYEE_ID, HIRE_DATE, MANAGER_ID)
SELECT EMPLOYEE_ID, HIRE_DATE, SALARY, MANAGER_ID
FROM EMPLOYEES;

SELECT * FROM SAL_HIST;

SELECT * FROM MANAGER_HIST;

COMMIT;

DELETE FROM SAL_HIST;

DELETE FROM MANAGER_HIST;

COMMIT;

-- CONDITIONAL INSERT
-- NOTE: IT CHECKS CONDITION AND INSERTS IN BOTH TABLES IF CONDITIONS ARE MET
INSERT ALL
WHEN SALARY > 9000 THEN
INTO SAL_HIST (EMPID, HIREDATE, SALARY) VALUES (EMPLOYEE_ID, HIRE_DATE, SALARY)
WHEN MANAGER_ID IS NOT NULL THEN
INTO MANAGER_HIST (EMPID, HIREDATE, MGR) VALUES (EMPLOYEE_ID, HIRE_DATE, MANAGER_ID)
SELECT EMPLOYEE_ID, HIRE_DATE, SALARY, MANAGER_ID
FROM EMPLOYEES;

SELECT * FROM SAL_HIST;

SELECT EMPID FROM SAL_HIST
INTERSECT
SELECT EMPID FROM MANAGER_HIST;

-- INSERT FIRST (CONDITIONAL)
-- IN THIS CASE, WHEN THE FIRST CONDITION IS MET, IT INSERTS AND SKIPS FURTHER WHEN
-- CONDITIONS
-- NO SHARED VALUES BETWEEN INSERTED VALUES

INSERT FIRST
WHEN SALARY > 6000 THEN
INTO SAL_HIST (EMPID, HIREDATE, SALARY) VALUES (EMPLOYEE_ID, HIRE_DATE, SALARY)
WHEN MANAGER_ID IS NOT NULL THEN
INTO MANAGER_HIST (EMPID, HIREDATE, MGR) VALUES (EMPLOYEE_ID, HIRE_DATE, MANAGER_ID)
SELECT EMPLOYEE_ID, HIRE_DATE, SALARY, MANAGER_ID
FROM EMPLOYEES;

-- INSERT ALL EXAMPLE
DROP TABLE EMP_SALES;

CREATE TABLE EMP_SALES
( EMP_ID NUMBER,
  WEEK_ID NUMBER,
  SALES_SUN NUMBER,
  SALES_MON NUMBER,
  SALES_TUE NUMBER,
  SALES_WED NUMBER,
  SALES_THU NUMBER
);

INSERT INTO EMP_SALES VALUES (1,14,2000,3000,4000,2500,1500);

SELECT * FROM EMP_SALES;

DROP TABLE SALES_INFO;

CREATE TABLE SALES_INFO
( EMPID NUMBER,
  WEEK_ID NUMBER,
  SALES NUMBER,
  DAY VARCHAR2(10)
);

INSERT ALL
INTO SALES_INFO VALUES (EMP_ID, WEEK_ID, SALES_SUN, 'SUN')
INTO SALES_INFO VALUES (EMP_ID, WEEK_ID, SALES_MON, 'MON')
INTO SALES_INFO VALUES (EMP_ID, WEEK_ID, SALES_TUE, 'TUE')
INTO SALES_INFO VALUES (EMP_ID, WEEK_ID, SALES_WED, 'WED')
INTO SALES_INFO VALUES (EMP_ID, WEEK_ID, SALES_THU, 'THU')
SELECT EMP_ID, WEEK_ID, SALES_SUN, SALES_MON, SALES_TUE, SALES_WED, SALES_THU
FROM EMP_SALES;

SELECT * FROM EMP_SALES;

-- MULTITABLE INSERT ONLY FOR TABLES, CANNOT BE DONE ON VIEWS OR MATERIALIZED VIEWS
-- MAXIMUM OF 999 INSERT TABLES CAN BE SPECIFIED

------------------------------------------------
-- PIVOTING
SELECT DEPARTMENT_ID, JOB_ID, COUNT(1)
FROM EMPLOYEES
WHERE JOB_ID IN ('MK_MAN', 'MK_REP', 'PU_CLERK', 'PU_MAN')
GROUP BY DEPARTMENT_ID, JOB_ID
ORDER BY 1,2;

-- CASE 1
SELECT * FROM
(
  SELECT DEPARTMENT_ID, JOB_ID
  FROM EMPLOYEES
  WHERE JOB_ID IN ('MK_MAN', 'MK_REP', 'PU_CLERK', 'PU_MAN')
)
PIVOT
(
  COUNT(1) FOR JOB_ID IN ('MK_MAN', 'MK_REP', 'PU_CLERK', 'PU_MAN') -- THESE HAVE TO BE HARDCODED
)
ORDER BY 1;

-- CASE 2
SELECT * FROM
(
  SELECT DEPARTMENT_ID, JOB_ID, HIRE_DATE
  FROM EMPLOYEES
  WHERE JOB_ID IN ('MK_MAN', 'MK_REP', 'PU_CLERK', 'PU_MAN')
)
PIVOT
(
  COUNT(1) FOR JOB_ID IN ('MK_MAN', 'MK_REP', 'PU_CLERK', 'PU_MAN') -- THESE HAVE TO BE HARDCODED
)
ORDER BY 1;

------------------------------------------------
-- MERGE STATEMENT
-- FOR SITUATIONS IN WHICH FOR MERGING TABLES, BOTH INSERT AND UPDATE ARE REQUIRED

MERGE INTO TABLE_B B
USING (SELECT * FROM TABLE_A) A
ON (B.ID = A.ID)
WHEN MATCHED THEN
UPDATE
SET B.NAME = A.NAME
WHEN NOT MATCHED THEN
INSERT VALUES (A.ID, A.NAME);

------------------------------------------------
-- FLASHBACK
SELECT * FROM RECYCLEBIN
ORDER BY 2;

-- DROPSCN - SYSTEM CHANGE NUMBER

-- TO REMOVE ALL OBJECTS FROM RECYCLEBIN
PURGE RECYCLEBIN;

CREATE TABLE EMP_COPY3
AS
SELECT * FROM EMPLOYEES;

DROP TABLE EMP_COPY3;

SELECT * FROM RECYCLEBIN;

FLASHBACK TABLE EMP_COPY3 TO BEFORE DROP;

SELECT * FROM EMP_COPY3;

SELECT * FROM RECYCLEBIN;
-- EMPTY AGAIN

------------------------------------------------
SELECT SALARY
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 107;

UPDATE EMPLOYEES
SET SALARY = SALARY + 100
WHERE EMPLOYEE_ID = 107;

COMMIT;

SELECT SALARY
FROM EMPLOYEES
VERSIONS BETWEEN SCN MINVALUE AND MAXVALUE
WHERE EMPLOYEE_ID = 107;

SELECT VERSIONS_STARTTIME, VERSIONS_ENDTIME, SALARY 
FROM EMPLOYEES
VERSIONS BETWEEN SCN MINVALUE AND MAXVALUE
WHERE EMPLOYEE_ID = 107;
-- LATEST RECORD HAS ENDTIME NULL

UPDATE EMPLOYEES
SET SALARY = SALARY + 100
WHERE EMPLOYEE_ID = 107;

COMMIT;

SELECT VERSIONS_STARTTIME, VERSIONS_ENDTIME, SALARY 
FROM EMPLOYEES
VERSIONS BETWEEN SCN MINVALUE AND MAXVALUE
WHERE EMPLOYEE_ID = 107;

-- AUDIT TRIGGERS ARE USUALLY USED

-------------------------------------------------
-------------------------------------------------
-- PRACTICE

SELECT * FROM EMP_DEFAULT;

INSERT INTO EMP_DEFAULT(EMPNO, ENAME)
VALUES (1231, 'DAVID');

-- OTHERWISE CAN MENTION COLUMN NAME, AND GIVE VALUE DEFAULT

-- NULL CAN ALSO BE INSERTED

UPDATE EMP_DEFAULT
SET STATUS=DEFAULT
WHERE EMPNO = 3;
-- DEFAULT CAN ALSO BE USED WITH THE UPDATE STATEMENT

SELECT * FROM EMP_DEFAULT;

INSERT INTO EMP_DEFAULT (EMPNO, ENAME)
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 100;

-- MULTITABLE INSERTS

SELECT * FROM SAL_HIST;

SELECT * FROM MANAGER_HIST;

INSERT ALL
  INTO SAL_HIST (EMPID, HIREDATE, SALARY) VALUES (EMPLOYEE_ID, HIRE_DATE, SALARY)
  INTO MANAGER_HIST (EMPID, HIREDATE, MGR) VALUES (EMPLOYEE_ID, HIRE_DATE, MANAGER_ID)
  SELECT EMPLOYEE_ID, HIRE_DATE, SALARY, MANAGER_ID
  FROM EMPLOYEES;

-- CONDITIONAL

INSERT ALL
  WHEN SALARY > 9000 THEN
  INTO SAL_HIST VALUES (EMPLOYEE_ID, HIRE_DATE, SALARY)
  WHEN MANAGER_ID IS NOT NULL THEN
  INTO MANAGER_HIST (EMPID, HIREDATE, MGR) VALUES (EMPLOYEE_ID, HIRE_DATE, MANAGER_ID)
  SELECT EMPLOYEE_ID, HIRE_DATE, SALARY, MANAGER_ID
  FROM EMPLOYEES;
  -- VALUES MAY BE INSERTED INTO BOTH TABLES DEPENDING ON THE CONDITIONS
  
-- INSERT FIRST
INSERT FIRST
  WHEN SALARY > 7500 THEN
  INTO SAL_HIST VALUES (EMPLOYEE_ID, HIRE_DATE, SALARY)
  WHEN MANAGER_ID IS NOT NULL THEN
  INTO MANAGER_HIST (EMPID, HIREDATE, MGR) VALUES (EMPLOYEE_ID, HIRE_DATE, MANAGER_ID)
  SELECT EMPLOYEE_ID, HIRE_DATE, SALARY, MANAGER_ID
  FROM EMPLOYEES;
-- NO VALUES ARE SENT TO BOTH TABLES

SELECT * FROM EMP_SALES;

SELECT * FROM SALES_INFO;








































