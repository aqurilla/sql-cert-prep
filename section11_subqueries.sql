-- USING SUBQUERIES
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >
(SELECT SALARY
FROM EMPLOYEES
WHERE LAST_NAME='Abel');

SELECT *
FROM EMPLOYEES
WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEES);

SELECT EMPLOYEES.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME, COUNT(EMPLOYEES.DEPARTMENT_ID)
FROM EMPLOYEES JOIN DEPARTMENTS
ON (EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID)
GROUP BY EMPLOYEES.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME
HAVING COUNT(1) >
(SELECT COUNT(1)
FROM EMPLOYEES
WHERE EMPLOYEES.DEPARTMENT_ID = 90);

-- IF SUBQ RETURNS NO ROWS, THEN THE INITIAL SELECT RETURNS NO ROWS

-- MULTIPLE ROW SUBQ
SELECT SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;

SELECT COUNT(*)
FROM EMPLOYEES WHERE SALARY NOT IN 
  (SELECT SALARY
  FROM EMPLOYEES
  WHERE DEPARTMENT_ID = 90);

SELECT *
FROM EMPLOYEES WHERE SALARY > ALL 
  (SELECT SALARY
  FROM EMPLOYEES
  WHERE DEPARTMENT_ID = 90);
  
SELECT *
FROM EMPLOYEES WHERE SALARY > ANY 
  (SELECT SALARY
  FROM EMPLOYEES
  WHERE DEPARTMENT_ID = 90);

-- NULL VALUES IN SUBQ
SELECT *
FROM EMPLOYEES
WHERE MANAGER_ID IS NULL;

-- IN IS EQUIVALENT TO =ANY
SELECT * FROM EMPLOYEES
WHERE MANAGER_ID IN (100, 101, NULL);

-- NOT IN EQUIVALENT TO <>ALL
SELECT * FROM EMPLOYEES
WHERE MANAGER_ID NOT IN (100, 101, NULL);
-- ABOVE STATEMENT EVALUATES TO 
-- REC <> 100 AND REC <> 101 AND REC <> NULL, WHICH GIVES UNKNOWN VALUE
-- THAT IS WHY NO RECORDS ARE RETURNED

-- EXISTS AND NOT EXISTS
SELECT *
FROM DEPARTMENTS DEPT
WHERE EXISTS
  (SELECT DEPARTMENT_ID
  FROM EMPLOYEES EMP
  WHERE EMP.DEPARTMENT_ID = DEPT.DEPARTMENT_ID);
  
  
-- USING SET OPERATORS
-- UNION & UNION ALL
SELECT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 176
UNION
SELECT EMPLOYEE_ID, JOB_ID 
FROM JOB_HISTORY
WHERE EMPLOYEE_ID = 176;

SELECT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES
UNION
SELECT EMPLOYEE_ID, JOB_ID 
FROM JOB_HISTORY;

SELECT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 176
UNION ALL
SELECT EMPLOYEE_ID, JOB_ID 
FROM JOB_HISTORY
WHERE EMPLOYEE_ID = 176;

-- COLUMN HEADING IS TAKEN FROM THE FIRST QUERY

-- INTERSECT
SELECT *
FROM EMPLOYEES
WHERE EMPLOYEE_ID = 200;

SELECT *
FROM JOB_HISTORY
WHERE EMPLOYEE_ID = 200;

SELECT EMPLOYEE_ID, JOB_ID
FROM EMPLOYEES
INTERSECT
SELECT EMPLOYEE_ID, JOB_ID 
FROM JOB_HISTORY;

-- MATCHING NULL COLUMN
SELECT EMPLOYEE_ID, JOB_ID, EMAIL
FROM EMPLOYEES
UNION
SELECT EMPLOYEE_ID, JOB_ID, TO_CHAR(NULL) EMAIL
FROM JOB_HISTORY;

-- ORDER BY CAN ONLY SEE COLUMN NAME IN FIRST QUERY
SELECT EMPLOYEE_ID, JOB_ID, SALARY
FROM EMPLOYEES
UNION
SELECT EMPLOYEE_ID, JOB_ID, 0 SALARY
FROM JOB_HISTORY
ORDER BY EMPLOYEE_ID;
-- CAN USE COLUMN NUMBER INSTEAD OF ALIASES


-----------------------------------------------
-----------------------------------------------
-- PRACTICE
SELECT *
FROM EMPLOYEES
WHERE SALARY >
(SELECT SALARY
FROM EMPLOYEES
WHERE LAST_NAME = 'Ozer');

-- WHEN USING A SINGLE ROW OPERATOR, SUBQ NEEDS TO RETURN A SINGLE ROW

-- GROUP FUNCTIONS CAN BE USED
SELECT *
FROM EMPLOYEES
WHERE SALARY = (
SELECT MAX(SALARY)
FROM EMPLOYEES);

SELECT DEPARTMENT_ID, COUNT(EMPLOYEE_ID)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING COUNT(EMPLOYEE_ID) > (SELECT COUNT(1)
                             FROM EMPLOYEES
                             WHERE DEPARTMENT_ID = 90);


-- IF SUBQ DOESNT RETURN ANY ROW, THE MAIN QUERY ALSO RETURNS NO ROWS

-----------------------------------------------
-- MULTIPLE ROW SUBQUERIES

SELECT SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90;

SELECT *
FROM EMPLOYEES
WHERE SALARY >= ANY(SELECT SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90);

SELECT *
FROM EMPLOYEES
WHERE SALARY >= ALL(SELECT SALARY
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 90);

-----------------------------------------------
-- NULL VALUES

SELECT *
FROM EMPLOYEES
WHERE MANAGER_ID IS NULL;

-- BELOW DOES NOT RETURN ANY ROWS BECAUSE NOT IN IS SAME AS !=  ALL
-- AND != NULL IS NOT DEFINED, SO DOES NOT RETURN ANY ROWS
SELECT *
FROM EMPLOYEES
WHERE MANAGER_ID NOT IN (100, 101, NULL);

-- SO IF A SUBQ CONTAINS A NULL VALUE, NOT IN WILL NOT RETRIEVE ANY RECORDS

-----------------------------------------------
-- EXISTS / NOT EXISTS

-- HAVE TO USE ALIAS
-- CORRELATED SUBQUERY
SELECT *
FROM DEPARTMENTS DEPT
WHERE EXISTS 
(SELECT DEPARTMENT_ID FROM EMPLOYEES EMP WHERE EMP.DEPARTMENT_ID = DEPT.DEPARTMENT_ID);

SELECT *
FROM DEPARTMENTS DEPT
WHERE NOT EXISTS 
(SELECT DEPARTMENT_ID FROM EMPLOYEES EMP WHERE EMP.DEPARTMENT_ID = DEPT.DEPARTMENT_ID);

